name: Laravel CI Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  setup:
    name: PHP Setup & Dependency Install
    runs-on: ubuntu-22.04
    outputs:
      cache-hit: ${{ steps.composer-cache.outputs.cache-hit }}
    steps:
      - uses: actions/checkout@v4

      - uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'

      - name: Cache Composer dependencies
        id: composer-cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: composer-

      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-suggest --no-interaction

      - name: Generate app key
        run: php artisan key:generate

      - name: Set directory permissions
        run: chmod -R 777 storage bootstrap/cache

  test:
    name: Laravel Tests
    needs: setup
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'

      - name: Restore Composer dependencies
        uses: actions/cache@v3
        with:
          path: vendor
          key: composer-${{ hashFiles('**/composer.lock') }}

      - name: Setup SQLite
        run: |
          mkdir -p database
          touch database/database.sqlite

      - name: Run PHPUnit
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: database/database.sqlite
        run: php artisan test

  lint:
    name: PHP Lint (PHPStan)
    needs: setup
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'

      - name: Restore Composer dependencies
        uses: actions/cache@v3
        with:
          path: vendor
          key: composer-${{ hashFiles('**/composer.lock') }}

      - name: Run PHPStan
        run: ./vendor/bin/phpstan analyse --no-progress

  deploy:
    name: Deployment
    needs: [test, lint]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    runs-on: ubuntu-22.04
    steps:
      - name: Deploy to production
        run: echo "ðŸš€ Deploying to production server..."
        # replace with your deployment script (e.g., SSH or GitHub Deploy)
